<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>VuexNote</title>
      <link href="/2021/vuexnote/"/>
      <url>/2021/vuexnote/</url>
      
        <content type="html"><![CDATA[<h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>​        在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。</p><h3 id="2-何时使用？"><a href="#2-何时使用？" class="headerlink" title="2.何时使用？"></a>2.何时使用？</h3><p>​     多个组件需要共享数据时</p><h3 id="3-工作原理图"><a href="#3-工作原理图" class="headerlink" title="3.工作原理图"></a>3.工作原理图</h3><p>   <img src="vuex.png" alt="Vuex 原理图（来源于官网）"></p><h3 id="4-搭建vuex环境"><a href="#4-搭建vuex环境" class="headerlink" title="4.搭建vuex环境"></a>4.搭建vuex环境</h3><ol><li><p>创建文件：<code>src/store/index.js</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//引入Vue核心库</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment" spellcheck="true">//引入Vuex</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment" spellcheck="true">//应用Vuex插件</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//准备actions对象——响应组件中用户的动作</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//准备mutations对象——修改state中的数据</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//准备state对象——保存具体的数据</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    actions<span class="token punctuation">,</span>    mutations<span class="token punctuation">,</span>    state<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//引入store</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token comment" spellcheck="true">//创建vm</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>    render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>    store<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ol><h3 id="5-基本使用"><a href="#5-基本使用" class="headerlink" title="5.基本使用"></a>5.基本使用</h3><ol><li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//引入Vue核心库</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment" spellcheck="true">//引入Vuex</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment" spellcheck="true">//引用Vuex</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//响应组件中的dispatch，传入的第一个参数context有commit,state,dispatch等属性</span>    <span class="token function">jia</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>        context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'JIA'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//执行mutate，改变state中的状态</span>    <span class="token function">JIA</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>        state<span class="token punctuation">.</span>sum <span class="token operator">+</span><span class="token operator">=</span> value    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//初始化数据</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>   sum<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    actions<span class="token punctuation">,</span>    mutations<span class="token punctuation">,</span>    state<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>组件中读取vuex中的数据：<code>this.$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>this.$store.dispatch('action中的方法名',数据)</code> 或 <code>this.$store.commit('mutations中的方法名',数据)</code></p><blockquote><p> 备注：若没有网络请求或其他业务逻辑，组件中也可以直接commit，即不写<code>dispatch</code>，直接写<code>commit</code></p></blockquote></li></ol><h3 id="6-getters的使用"><a href="#6-getters的使用" class="headerlink" title="6.getters的使用"></a>6.getters的使用</h3><ol><li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// bigSum 可以理解为一个计算属性</span>    <span class="token function">bigSum</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> state<span class="token punctuation">.</span>sum <span class="token operator">*</span> <span class="token number">10</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token operator">...</span>    getters<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>组件中读取getters中的数据：<code>this.$store.getters.bigSum</code></p></li></ol><h3 id="7-四个map方法的使用"><a href="#7-四个map方法的使用" class="headerlink" title="7.四个map方法的使用"></a>7.四个map方法的使用</h3><ol start="0"><li><p><strong>为什么要使用 mapXXX 方法？</strong><br>当我们在组件中操作store中存储的数据时不可避免的要编写大量的computed和methods，这样的操作十分繁琐，而使用 mapXXX 方法能简化我们的操作。例如借助 <code>mapState()</code> 方法可以帮我们生成相应的computed，借助 <code>mapActions()</code> 方法可以帮我们生成相应的methods，其他的方法同理。再使用 … 扩展运算符将生成的computed或methods展开。</p></li><li><p><strong>首先需要在组件中导入 mapXXX 方法</strong><br><code>import {mapState, mapGetters, mapMutations, mapActions} from 'vuex'</code>  </p></li><li><p><strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p><pre class=" language-js"><code class="language-js">computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//（对象写法）借助mapState生成计算属性：sum、school、subject</span>     <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>sum<span class="token punctuation">:</span><span class="token string">'sum'</span><span class="token punctuation">,</span>school<span class="token punctuation">:</span><span class="token string">'school'</span><span class="token punctuation">,</span>subject<span class="token punctuation">:</span><span class="token string">'subject'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token comment" spellcheck="true">//（数组写法）借助mapState生成与state中的数据同名的计算属性：sum、school、subject</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'sum'</span><span class="token punctuation">,</span><span class="token string">'school'</span><span class="token punctuation">,</span><span class="token string">'subject'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre></li><li><p><strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p><pre class=" language-js"><code class="language-js">computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//（对象写法）借助mapGetters生成计算属性：bigSum</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">{</span>bigSum<span class="token punctuation">:</span><span class="token string">'bigSum'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//（数组写法）借助mapGetters生成同名的计算属性：bigSum</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'bigSum'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre></li><li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><pre class=" language-js"><code class="language-js">methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//（对象写法）靠mapActions生成：incrementOdd、incrementWait</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">{</span>incrementOdd<span class="token punctuation">:</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span>incrementWait<span class="token punctuation">:</span><span class="token string">'jiaWait'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//（数组写法）靠mapActions生成同名的：jiaOdd, jiaWait</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span><span class="token string">'jiaWait'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>mapMutations方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><pre class=" language-js"><code class="language-js">methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//（对象写法）靠mapActions生成：increment、decrement</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">{</span>increment<span class="token punctuation">:</span><span class="token string">'JIA'</span><span class="token punctuation">,</span>decrement<span class="token punctuation">:</span><span class="token string">'JIAN'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//（数组写法）靠mapMutations生成同名的methods：JIA、JIAN</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'JIA'</span><span class="token punctuation">,</span><span class="token string">'JIAN'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre></li></ol><blockquote><p>注意：借助mapActions与mapMutations生成的methods需要向actions和mutations传递参数时，必须要在调用该method的时候传递参数。</p></blockquote><h3 id="8-模块化-命名空间"><a href="#8-模块化-命名空间" class="headerlink" title="8.模块化+命名空间"></a>8.模块化+命名空间</h3><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改<code>store.js</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> countAbout <span class="token operator">=</span> <span class="token punctuation">{</span>  namespaced<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//开启命名空间</span>  state<span class="token punctuation">:</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  getters<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">bigSum</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> state<span class="token punctuation">.</span>sum <span class="token operator">*</span> <span class="token number">10</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> personAbout <span class="token operator">=</span> <span class="token punctuation">{</span>  namespaced<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//开启命名空间</span>  state<span class="token punctuation">:</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>    countAbout<span class="token punctuation">:</span> countAbout<span class="token punctuation">,</span>    personAbout<span class="token punctuation">:</span> personAbout  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>开启命名空间后，组件中读取state数据：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//方式一：自己直接读取</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>countAbout<span class="token punctuation">.</span>sum<span class="token comment" spellcheck="true">//方式二：借助mapState生成后再读取：</span><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'sum'</span><span class="token punctuation">,</span><span class="token string">'school'</span><span class="token punctuation">,</span><span class="token string">'subject'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></li><li><p>开启命名空间后，组件中读取getters数据：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//方式一：自己直接读取</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">[</span><span class="token string">'countAbout/bigSum'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//方式二：借助mapGetters生成后再读取：</span><span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'bigSum'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></li><li><p>开启命名空间后，组件中调用dispatch</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//方式一：自己直接dispatch</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'personAbout/addPersonWang'</span><span class="token punctuation">,</span>person<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//方式二：借助mapActions生成后再读取：</span><span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token string">'personAbout'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'addPersonWang'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></li><li><p>开启命名空间后，组件中调用commit</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//方式一：自己直接commit</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'personAbout/ADD_PERSON'</span><span class="token punctuation">,</span>person<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//方式二：借助mapMutations生成后再读取：</span><span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token string">'personAbout'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'ADD_PERSON'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></li></ol><hr><p><em><strong>本文章根据尚硅谷笔记整理而成</strong></em></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo发布一篇文章</title>
      <link href="/2021/blogwriting/"/>
      <url>/2021/blogwriting/</url>
      
        <content type="html"><![CDATA[<h2 id="新建一篇文章"><a href="#新建一篇文章" class="headerlink" title="新建一篇文章"></a>新建一篇文章</h2><p>1、在hexo博客目录下，进入Git Bash命令窗口中，输入以下命令：</p><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"我的第一篇博客文章"</span></code></pre><p>2、在博客目录下的/source/_posts/ 文件夹下，就可以看到已经生成了标题为(我的第一篇博客文章.md)的博客文件，在该文件中编辑自己的博客文章即可。</p><blockquote><p>注意：Hexo 发布的文章是 Markdown 格式的文件，需要使用 Markdown 语法进行编写。</p></blockquote><p>Markdown 语法自查：<a href="https://markdown.com.cn/">Markdown 官方教程</a></p><hr><h2 id="文章-Front-matter-配置"><a href="#文章-Front-matter-配置" class="headerlink" title="文章 Front-matter 配置"></a>文章 Front-matter 配置</h2><p>Front-matter 选项中的所有内容均为非必填的。但是建议至少填写 title 和 date 的值。</p><h3 id="基本配置示例"><a href="#基本配置示例" class="headerlink" title="基本配置示例"></a>基本配置示例</h3><pre class=" language-markdown"><code class="language-markdown">title: 使用Hexo发布一篇文章date: 2021-11-20 21：30：00author: Tulongimg: /source/images/xxx.jpgsummary: 记录了Hexo发布一篇文章的一般流程tags:<span class="token list punctuation">-</span> Hexo<span class="token list punctuation">-</span> Markdowncategories: 博客</code></pre><h3 id="详细配置"><a href="#详细配置" class="headerlink" title="详细配置"></a>详细配置</h3><p>参见：<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md#%E6%96%87%E7%AB%A0-front-matter-%E4%BB%8B%E7%BB%8D">Front-matter 选项详解</a></p><hr><h2 id="用-Markdown-语法编写正文部分"><a href="#用-Markdown-语法编写正文部分" class="headerlink" title="用 Markdown 语法编写正文部分"></a>用 Markdown 语法编写正文部分</h2><p>像这样：<br><img src="0.png" alt="示例"></p><h3 id="在文章中插入图片的方法"><a href="#在文章中插入图片的方法" class="headerlink" title="在文章中插入图片的方法"></a>在文章中插入图片的方法</h3><p><em><strong>1. 在本地引用</strong></em></p><p>绝对路径：当Hexo项目中只用到少量图片时，可以将图片统一放在 source/images 文件夹中，通过markdown语法访问它们。这种方式引入的图片既可以在首页内容中访问到，也可以在文章正文中访问到。像下面这样引用：</p><p><code>![图片alt](/images/image.jpg "图片title")</code></p><p>相对路径：图片还可以放在文章自己的文件夹中。将 _config.yml 文件中的配置项 post_asset_folder 设为 true 后，执行命令<code>$ hexo new post_name</code>，在 source/_posts 中会生成文章 post_name.md 和同名文件夹 post_name 。将图片资源放在 post_name 中，文章就可以使用相对路径引用图片资源了。像下面这样引入：</p><p><code>![图片alt](image.jpg)</code></p><p>这样引入的图片只能在文章中显示，但无法在首页中正常显示。如果希望图片在文章和首页中同时显示，可以使用标签插件语法。像这样：</p><p><code>{% asset_img image.jpg This is an image %}</code></p><p><em><strong>2. CDN 引用</strong></em></p><p>除了在本地存储图片，还可以将图片上传到一些免费的 CDN 服务中。比如 Cloudinary 提供的图片 CDN 服务，在 Cloudinary 中上传图片后，会生成对应的 url 地址，将地址直接拿来引用即可。</p><hr><h2 id="启动服务器，本地测试"><a href="#启动服务器，本地测试" class="headerlink" title="启动服务器，本地测试"></a>启动服务器，本地测试</h2><p><code>$ hexo server</code></p><hr><h2 id="生成静态文件并部署到-GitHub-上"><a href="#生成静态文件并部署到-GitHub-上" class="headerlink" title="生成静态文件并部署到 GitHub 上"></a>生成静态文件并部署到 GitHub 上</h2><p>想要发布的文章在本地预览无误后，在 Git Bash 命令窗口依次执行如下命令：</p><p><code>$ hexo clean</code></p><p><code>$ hexo generate</code></p><p><code>$ hexo deploy</code></p><p>执行完毕后在浏览器访问自己的博客域名，即可看到刚才发布的文章。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客文章</title>
      <link href="/2021/myfirstblog/"/>
      <url>/2021/myfirstblog/</url>
      
        <content type="html"><![CDATA[<p>javascript是一门充满活力、简单易用的语言，又是一门具有许多复杂微妙技术的语言。即使是经验丰富的javascript开发者，如果没有认真学习的话，也无法真正理解它们，这就是javascript的矛盾之处。由于javascript不必理解就可以使用，因此通常来说很难真正理解语言本身，这就是我们面临的挑战。不满足于只是让代码正常工作，而是想要弄清楚为什么，勇于挑战这条崎岖颠簸的少有人走的路，拥抱整个javascript…</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/hello-world/"/>
      <url>/2021/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
